{"ast":null,"code":"const BASE_URL = \"http://localhost:5000/api\"; // Change if deployed\n\n// Utility for parsing JSON safely\nasync function safeJson(res) {\n  try {\n    return await res.json();\n  } catch {\n    return {};\n  }\n}\n\n// -------- AUTH --------\n\n// Register user\nexport async function registerUser(userData) {\n  try {\n    const res = await fetch(`${BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Registration failed.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Registration failed.\"\n    };\n  }\n}\n\n// Login user\nexport async function loginUser(credentials) {\n  try {\n    const res = await fetch(`${BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Login failed.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Login failed.\"\n    };\n  }\n}\n\n// -------- STUDENT & GENERAL --------\n\n// Get all jobs (for students)\nexport async function getJobs(token) {\n  try {\n    const res = await fetch(`${BASE_URL}/jobs`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Could not fetch jobs.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Could not fetch jobs.\"\n    };\n  }\n}\n\n// Get all gigs (for students)\nexport async function getGigs(token) {\n  try {\n    const res = await fetch(`${BASE_URL}/gigs`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Could not fetch gigs.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Could not fetch gigs.\"\n    };\n  }\n}\n\n// Get upskill recommendations\nexport async function getUpskill(token) {\n  try {\n    const res = await fetch(`${BASE_URL}/upskill`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Could not fetch upskill recommendations.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Could not fetch upskill recommendations.\"\n    };\n  }\n}\n\n// -------- PROFILE (Student or Employer) --------\n\n// Get current profile\nexport async function getProfile(token) {\n  try {\n    const res = await fetch(`${BASE_URL}/profile`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Could not fetch profile.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Could not fetch profile.\"\n    };\n  }\n}\n\n// Update current profile\nexport async function updateProfile(profileData, token) {\n  try {\n    const res = await fetch(`${BASE_URL}/profile`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(profileData)\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Failed to update profile.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Failed to update profile.\"\n    };\n  }\n}\n\n// Upload profile picture\nexport async function uploadProfilePicture(file, token) {\n  try {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const res = await fetch(`${BASE_URL}/profile/upload`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: formData\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Upload failed.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Upload failed.\"\n    };\n  }\n}\n\n// -------- EMPLOYER --------\n\n// Get jobs posted by employer\nexport async function getEmployerJobs(token) {\n  try {\n    const res = await fetch(`${BASE_URL}/employer/jobs`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Could not fetch employer jobs.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Could not fetch employer jobs.\"\n    };\n  }\n}\n\n// Post a new job (employer)\nexport async function postJob(jobData, token) {\n  try {\n    const res = await fetch(`${BASE_URL}/employer/jobs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(jobData)\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Failed to post job.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Failed to post job.\"\n    };\n  }\n}\n\n// Edit a job (employer)\nexport async function editJob(jobId, jobData, token) {\n  try {\n    const res = await fetch(`${BASE_URL}/employer/jobs/${jobId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(jobData)\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Failed to update job.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Failed to update job.\"\n    };\n  }\n}\n\n// Post a new gig (employer, if supported)\nexport async function postGig(gigData, token) {\n  try {\n    const res = await fetch(`${BASE_URL}/employer/gigs`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(gigData)\n    });\n    const data = await safeJson(res);\n    if (!res.ok) throw new Error(data.message || \"Failed to post gig.\");\n    return data;\n  } catch (err) {\n    return {\n      success: false,\n      message: err.message || \"Failed to post gig.\"\n    };\n  }\n}","map":{"version":3,"names":["BASE_URL","safeJson","res","json","registerUser","userData","fetch","method","headers","body","JSON","stringify","data","ok","Error","message","err","success","loginUser","credentials","getJobs","token","Authorization","getGigs","getUpskill","getProfile","updateProfile","profileData","uploadProfilePicture","file","formData","FormData","append","getEmployerJobs","postJob","jobData","editJob","jobId","postGig","gigData"],"sources":["C:/Users/chris/OneDrive/Desktop/tech-nectUp/tech-nect2/src/utils/api.js"],"sourcesContent":["const BASE_URL = \"http://localhost:5000/api\"; // Change if deployed\r\n\r\n// Utility for parsing JSON safely\r\nasync function safeJson(res) {\r\n  try {\r\n    return await res.json();\r\n  } catch {\r\n    return {};\r\n  }\r\n}\r\n\r\n// -------- AUTH --------\r\n\r\n// Register user\r\nexport async function registerUser(userData) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/auth/register`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Registration failed.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Registration failed.\" };\r\n  }\r\n}\r\n\r\n// Login user\r\nexport async function loginUser(credentials) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/auth/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Login failed.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Login failed.\" };\r\n  }\r\n}\r\n\r\n// -------- STUDENT & GENERAL --------\r\n\r\n// Get all jobs (for students)\r\nexport async function getJobs(token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/jobs`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Could not fetch jobs.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Could not fetch jobs.\" };\r\n  }\r\n}\r\n\r\n// Get all gigs (for students)\r\nexport async function getGigs(token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/gigs`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Could not fetch gigs.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Could not fetch gigs.\" };\r\n  }\r\n}\r\n\r\n// Get upskill recommendations\r\nexport async function getUpskill(token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/upskill`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Could not fetch upskill recommendations.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Could not fetch upskill recommendations.\" };\r\n  }\r\n}\r\n\r\n// -------- PROFILE (Student or Employer) --------\r\n\r\n// Get current profile\r\nexport async function getProfile(token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/profile`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Could not fetch profile.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Could not fetch profile.\" };\r\n  }\r\n}\r\n\r\n// Update current profile\r\nexport async function updateProfile(profileData, token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/profile`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(profileData),\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Failed to update profile.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Failed to update profile.\" };\r\n  }\r\n}\r\n\r\n// Upload profile picture\r\nexport async function uploadProfilePicture(file, token) {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    const res = await fetch(`${BASE_URL}/profile/upload`, {\r\n      method: \"POST\",\r\n      headers: { Authorization: `Bearer ${token}` },\r\n      body: formData,\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Upload failed.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Upload failed.\" };\r\n  }\r\n}\r\n\r\n// -------- EMPLOYER --------\r\n\r\n// Get jobs posted by employer\r\nexport async function getEmployerJobs(token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/employer/jobs`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Could not fetch employer jobs.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Could not fetch employer jobs.\" };\r\n  }\r\n}\r\n\r\n// Post a new job (employer)\r\nexport async function postJob(jobData, token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/employer/jobs`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(jobData),\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Failed to post job.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Failed to post job.\" };\r\n  }\r\n}\r\n\r\n// Edit a job (employer)\r\nexport async function editJob(jobId, jobData, token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/employer/jobs/${jobId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(jobData),\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Failed to update job.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Failed to update job.\" };\r\n  }\r\n}\r\n\r\n// Post a new gig (employer, if supported)\r\nexport async function postGig(gigData, token) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/employer/gigs`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(gigData),\r\n    });\r\n    const data = await safeJson(res);\r\n    if (!res.ok) throw new Error(data.message || \"Failed to post gig.\");\r\n    return data;\r\n  } catch (err) {\r\n    return { success: false, message: err.message || \"Failed to post gig.\" };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}